//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace practice2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class clothes_storeEntities : DbContext
    {
        public clothes_storeEntities()
            : base("name=clothes_storeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<cat_subcategory> cat_subcategory { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<category_gender> category_gender { get; set; }
        public virtual DbSet<cheque> cheques { get; set; }
        public virtual DbSet<cheque_product_status> cheque_product_status { get; set; }
        public virtual DbSet<cheque_set> cheque_set { get; set; }
        public virtual DbSet<city> cities { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<gender> genders { get; set; }
        public virtual DbSet<price> prices { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<product_address> product_address { get; set; }
        public virtual DbSet<product_size> product_size { get; set; }
        public virtual DbSet<size> sizes { get; set; }
        public virtual DbSet<size_type> size_type { get; set; }
        public virtual DbSet<status_of_cheque> status_of_cheque { get; set; }
        public virtual DbSet<store> stores { get; set; }
        public virtual DbSet<store_address> store_address { get; set; }
        public virtual DbSet<subcategory> subcategories { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<Catalogue_GetLastAmount_Result> Catalogue_GetLastAmount(Nullable<int> store_address_id, Nullable<int> product_size_id)
        {
            var store_address_idParameter = store_address_id.HasValue ?
                new ObjectParameter("store_address_id", store_address_id) :
                new ObjectParameter("store_address_id", typeof(int));
    
            var product_size_idParameter = product_size_id.HasValue ?
                new ObjectParameter("product_size_id", product_size_id) :
                new ObjectParameter("product_size_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Catalogue_GetLastAmount_Result>("Catalogue_GetLastAmount", store_address_idParameter, product_size_idParameter);
        }
    
        public virtual ObjectResult<Get_Address_Result> Get_Address(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Address_Result>("Get_Address", idParameter);
        }
    
        public virtual ObjectResult<GetCustBag_Result> GetCustBag(Nullable<int> cust_id)
        {
            var cust_idParameter = cust_id.HasValue ?
                new ObjectParameter("cust_id", cust_id) :
                new ObjectParameter("cust_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustBag_Result>("GetCustBag", cust_idParameter);
        }
    
        public virtual ObjectResult<GetCustOrder_Result> GetCustOrder(Nullable<int> cust_id)
        {
            var cust_idParameter = cust_id.HasValue ?
                new ObjectParameter("cust_id", cust_id) :
                new ObjectParameter("cust_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustOrder_Result>("GetCustOrder", cust_idParameter);
        }
    
        public virtual ObjectResult<GetStats_Result> GetStats(Nullable<int> store_id, Nullable<System.DateTime> date_one, Nullable<System.DateTime> date_two)
        {
            var store_idParameter = store_id.HasValue ?
                new ObjectParameter("store_id", store_id) :
                new ObjectParameter("store_id", typeof(int));
    
            var date_oneParameter = date_one.HasValue ?
                new ObjectParameter("date_one", date_one) :
                new ObjectParameter("date_one", typeof(System.DateTime));
    
            var date_twoParameter = date_two.HasValue ?
                new ObjectParameter("date_two", date_two) :
                new ObjectParameter("date_two", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStats_Result>("GetStats", store_idParameter, date_oneParameter, date_twoParameter);
        }
    
        public virtual ObjectResult<OrderStatus_NoFilters_Result> OrderStatus_NoFilters(Nullable<int> store_id)
        {
            var store_idParameter = store_id.HasValue ?
                new ObjectParameter("store_id", store_id) :
                new ObjectParameter("store_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderStatus_NoFilters_Result>("OrderStatus_NoFilters", store_idParameter);
        }
    }
}
